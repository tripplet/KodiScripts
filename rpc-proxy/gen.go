// Ignore file as this is only used during 'go generate'
// +build ignore

// This program generates the webpage handlers
package main

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"regexp"
	"time"

	"github.com/tdewolff/minify/v2"
	"github.com/tdewolff/minify/v2/css"
	"github.com/tdewolff/minify/v2/html"
	"github.com/tdewolff/minify/v2/js"
)

func main() {
	fmt.Println("Updating go files:")
	fileReplace := regexp.MustCompile("// %%%%(\\w+)=([\\w\\.]+)%%%%")
	files, _ := filepath.Glob("*.tmpl.go")

	m := minify.New()
	m.AddFunc("text/css", css.Minify)
	m.AddFunc("text/html", html.Minify)
	m.AddFuncRegexp(regexp.MustCompile("^(application|text)/(x-)?(java|ecma)script$"), js.Minify)

	for _, goFile := range files {
		fmt.Printf("%s... ", goFile)

		goFileContent, err := ioutil.ReadFile(goFile)
		if err != nil {
			panic(err)
		}

		found := fileReplace.FindSubmatchIndex(goFileContent)
		if found == nil {
			fmt.Print("nothing to update")
			continue
		}

		fmt.Print("updated")

		// Determine linebreak
		linebreak := "\n"
		firstLineBreak := bytes.Index(goFileContent, []byte("\n"))
		if goFileContent[firstLineBreak-1] == byte('\r') {
			linebreak = "\r\n"
		}

		variableName := string(goFileContent[found[2]:found[3]])
		templateFileName := string(goFileContent[found[4]:found[5]])

		templateFileContent, err := ioutil.ReadFile(templateFileName)
		if err != nil {
			panic(err)
		}

		templateFileContentMinified, err := m.Bytes("text/html", templateFileContent)
		if err != nil {
			panic(err)
		}

		goFileUpdate, err := os.Create(goFile)
		if err != nil {
			panic(err)
		}

		goFileUpdate.Write(goFileContent[:found[1]])
		goFileUpdate.WriteString(fmt.Sprintf("%s// START OF AUTOGENERATED CONTENT - DO NOT CHANGE ANYTHING BELOW", linebreak))
		goFileUpdate.WriteString(fmt.Sprintf("%s// GENERATED: %s", linebreak, time.Now()))
		goFileUpdate.WriteString(fmt.Sprintf("%svar %s = `", linebreak, variableName))
		goFileUpdate.Write(templateFileContentMinified)
		goFileUpdate.WriteString("`")
		goFileUpdate.Close()
	}

	fmt.Println()
}
